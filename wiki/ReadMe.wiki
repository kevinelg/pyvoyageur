_Par Raphael Guye et Jonathan Neuhaus_
_30 avril 2010_

== Description de notre implémentation ==
===Sélection===
  * On choisit pe1% de la population à éliminer (= R individu)
  * On trie nos différents trajets.
  * On élimine toutes les valeurs proches (dont la longueur entre 2 individue < epsilonDistCities), ceci tant que R > 0
   * Si il reste encore des individus à éliminer, on élimine les plus faibles.

===Croisement===
  * On cherche à générer une population R éliminée lors de l'étape de sélection
  * Tant que R > 0 : On va choisir aléatoirement une paire de trajets 
Pour chaque paire de trajet:
  * On choisit une ville aléatoirement
  * On va créer un nouveau trajet de la manière suivante :
   * À partir du trajet 1, on ajoute les villes *à gauche* de la ville déjà choisie tant que la ville ne se situe pas déjà  dans le nouveau trajet en cours de génération
   * À partir du trajet 2, on ajoute les villes *à droite* de la ville déjà choisie tant que la ville ne se situe pas déjà dans le nouveau trajet en cours de génération
  * Une fois que l'on ne peut plus ajouter de villes ni à droite ni à gauche, on ajoute le reste des villes présentes dans le trajet 1 aléatoirement

===Mutation===
  * On va chercher à faire muter pe2% de la population (= R individu)
  * On sélectionne dans tous les cas la meilleure solution.
  * On ajoute aléatoirement des trajets dans la liste des trajets à muter.

  * Pour toute paire de ville i,j :
   * On vérifie si le fait d'inverser le trajet entre ces 2 villes apporte un gain. Si c'est le cas, on inverse le trajet et on continue.
   * Lorsque toutes les combinaisons ont étées passées en revue => On s'arrête.

Nous avions également implémenté un algorithme d'échange de villes ainsi que sa fonction de mesure du gain. Mais les résultats n'étaient pas concluants (temps plus long et résultats de mauvaises qualités ou en tout cas pas meilleurs)

===Choix de la population===
  # Un trajet de base :
   # Trajet dans l'ordre d'arrivée des villes
   # Réorganisation de ce trajet vers un résultat _pas trop mauvais_
    # On crée un nouveau trajet en ajoutant à chaque fois la ville la plus proche de la ville courante pas encore traitée
  # Reste de la population
   # Génération aléatoire d'indice qui représentent des trajets aléatoires.

La population de base varie en fonction du nombre de villes:
  * si le nombre de ville < 50 alors population = 100
  * sinon population = 67 + 2/3 x nbVille
ce qui correspond à : 
  * population = 100 pour 50 villes
  * population = 200 pour 200 villes

===Choix du % de sélection et croisement à faire (pe1)===
Nous avons remarqué que nous obtenions les meilleurs résultats lorsque la sélection et le croisement n'était pas effectué (pe1=0%)

===Choix du % de mutation à faire (pe2)===
Nous faisons l'approximation linéaire suivante:
  * si le nombre de ville < 50 alors pe2 = 100
  * sinon, pe2 = 114 -7/25* nbVille
ce qui correspond à :
  * pe2 = 100 pour 50 villes
  * pe2 =30 pour 300 villes
  * On fixe pe2 minimal à *10*

==Listing de l'archive rendue==

===Arbre===

{{{
/
|--Donnee.pdf
|--Documents
  |-- # Documents utilisés pour le projet. Voir le listing détaillé plus bas
|--Ressources
  |-- # Toutes les ressources utilisées durant le projet, avec notre module final du voyageur de commerce (*GuyeNeuhaus.py*)
}}}

===Documents===
|| arob98.pdf || Explications sur l'implémentation d'un algorithme génétique pour résoudre le PVC ||
|| Explication TSP.pdf || Explications + exemple sur l'implémentation d'un algorithme génétique pour résoudre le PVC ||
|| lec26.pdf || Explications et tests de différents algorithmes ||
|| LKH_REPORT.pdf || Explications sur l'algorithme de Lin-Kernighan (très efficace) ||
|| TSPchapter.pdf || Explications et tests de différents algorithmes (plus détaillés) ||
|| testPerformance.xls || Tests de performance et des optimisations réalisées avec notre implémentation ||

===Ressources===
|| Dossier "data" || contient les villes d'exemples ||
|| GUI_example.py || mode d'emploi du GUI ||
||GuyeNeuhaus.py || notre implémentation de la résolution du voyageur de commerce ||
|| MyUtils.py || Décorateur permettant de mesurer le temps d'une fonction ||
|| PVC-test.py || Logiciel de test d'implémentation du voyageur de commerce ||